/*
 * Owen Rabe
 * 6/7/22
 * Final Summative For ICS3U: Creating a functional game (Tic Tac Toe)
 * including all enhancements, saving & loading, Ai, and Ai difficulty selection
 */
package rabetictactoe;

import javax.swing.JButton;
import java.io.File;  // Import the File class
import java.io.FileNotFoundException;
import java.io.IOException;  // Import the IOException class to handle errors
import java.io.FileWriter;
import java.util.Scanner;

public class RabeTicTacToe extends javax.swing.JFrame {

    JButton[][] theBoard = new JButton[3][3];
    String turn;

    public RabeTicTacToe() {
        initComponents();
        theBoard[0][0] = btn00;
        theBoard[0][1] = btn01;
        theBoard[0][2] = btn02;
        theBoard[1][0] = btn10;
        theBoard[1][1] = btn11;
        theBoard[1][2] = btn12;
        theBoard[2][0] = btn20;
        theBoard[2][1] = btn21;
        theBoard[2][2] = btn22;
        turn = "X";
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        modeButtons = new javax.swing.ButtonGroup();
        difficultyButtons = new javax.swing.ButtonGroup();
        btn00 = new javax.swing.JButton();
        btn01 = new javax.swing.JButton();
        btn02 = new javax.swing.JButton();
        btn10 = new javax.swing.JButton();
        btn11 = new javax.swing.JButton();
        btn12 = new javax.swing.JButton();
        btn20 = new javax.swing.JButton();
        btn21 = new javax.swing.JButton();
        btn22 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        btnOnePlayer = new javax.swing.JRadioButton();
        btnTwoPlayer = new javax.swing.JRadioButton();
        jLabel3 = new javax.swing.JLabel();
        btnEasy = new javax.swing.JRadioButton();
        btnHard = new javax.swing.JRadioButton();
        btnStart = new javax.swing.JButton();
        btnLoad = new javax.swing.JButton();
        btnSave = new javax.swing.JButton();
        btnReset = new javax.swing.JButton();
        turnTxt = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        btn00.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        btn00.setText("-");
        btn00.setEnabled(false);
        btn00.setMaximumSize(new java.awt.Dimension(57, 53));
        btn00.setMinimumSize(new java.awt.Dimension(57, 53));
        btn00.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn00ActionPerformed(evt);
            }
        });

        btn01.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        btn01.setText("-");
        btn01.setEnabled(false);
        btn01.setMaximumSize(new java.awt.Dimension(57, 53));
        btn01.setMinimumSize(new java.awt.Dimension(57, 53));
        btn01.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn01ActionPerformed(evt);
            }
        });

        btn02.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        btn02.setText("-");
        btn02.setEnabled(false);
        btn02.setMaximumSize(new java.awt.Dimension(57, 53));
        btn02.setMinimumSize(new java.awt.Dimension(57, 53));
        btn02.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn02ActionPerformed(evt);
            }
        });

        btn10.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        btn10.setText("-");
        btn10.setEnabled(false);
        btn10.setMaximumSize(new java.awt.Dimension(57, 53));
        btn10.setMinimumSize(new java.awt.Dimension(57, 53));
        btn10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn10ActionPerformed(evt);
            }
        });

        btn11.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        btn11.setText("-");
        btn11.setEnabled(false);
        btn11.setMaximumSize(new java.awt.Dimension(57, 53));
        btn11.setMinimumSize(new java.awt.Dimension(57, 53));
        btn11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn11ActionPerformed(evt);
            }
        });

        btn12.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        btn12.setText("-");
        btn12.setEnabled(false);
        btn12.setMaximumSize(new java.awt.Dimension(57, 53));
        btn12.setMinimumSize(new java.awt.Dimension(57, 53));
        btn12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn12ActionPerformed(evt);
            }
        });

        btn20.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        btn20.setText("-");
        btn20.setEnabled(false);
        btn20.setMaximumSize(new java.awt.Dimension(57, 53));
        btn20.setMinimumSize(new java.awt.Dimension(57, 53));
        btn20.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn20ActionPerformed(evt);
            }
        });

        btn21.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        btn21.setText("-");
        btn21.setEnabled(false);
        btn21.setMaximumSize(new java.awt.Dimension(57, 53));
        btn21.setMinimumSize(new java.awt.Dimension(57, 53));
        btn21.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn21ActionPerformed(evt);
            }
        });

        btn22.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        btn22.setText("-");
        btn22.setEnabled(false);
        btn22.setMaximumSize(new java.awt.Dimension(57, 53));
        btn22.setMinimumSize(new java.awt.Dimension(57, 53));
        btn22.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn22ActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        jLabel1.setText("Rabe Tic-Tac-Toe");

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel2.setText("Select Mode: ");

        modeButtons.add(btnOnePlayer);
        btnOnePlayer.setText("1-Player");
        btnOnePlayer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOnePlayerActionPerformed(evt);
            }
        });

        modeButtons.add(btnTwoPlayer);
        btnTwoPlayer.setSelected(true);
        btnTwoPlayer.setText("2-Player");
        btnTwoPlayer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTwoPlayerActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel3.setText("Select Difficulty:");

        difficultyButtons.add(btnEasy);
        btnEasy.setSelected(true);
        btnEasy.setText("Easy");
        btnEasy.setEnabled(false);

        difficultyButtons.add(btnHard);
        btnHard.setText("Hard");
        btnHard.setEnabled(false);

        btnStart.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        btnStart.setText("Start!");
        btnStart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStartActionPerformed(evt);
            }
        });

        btnLoad.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnLoad.setText("Load Saved Game");
        btnLoad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLoadActionPerformed(evt);
            }
        });

        btnSave.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        btnSave.setText("Save");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        btnReset.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        btnReset.setText("Reset");
        btnReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResetActionPerformed(evt);
            }
        });

        turnTxt.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(42, 42, 42)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btn00, javax.swing.GroupLayout.DEFAULT_SIZE, 57, Short.MAX_VALUE)
                    .addComponent(btn10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btn20, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btn21, javax.swing.GroupLayout.DEFAULT_SIZE, 57, Short.MAX_VALUE)
                            .addComponent(btn01, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btn11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btn12, javax.swing.GroupLayout.DEFAULT_SIZE, 57, Short.MAX_VALUE)
                            .addComponent(btn22, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btn02, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(33, 33, 33)
                                .addComponent(jLabel1))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(172, 172, 172)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(btnSave, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btnStart, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(btnOnePlayer)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(btnTwoPlayer))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(btnEasy)
                                        .addGap(18, 18, 18)
                                        .addComponent(btnHard))
                                    .addComponent(btnLoad, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btnReset, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addComponent(turnTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(60, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btn02, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btn01, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btn00, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btn12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btn10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btn11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btn21, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btn22, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btn20, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnOnePlayer)
                            .addComponent(btnTwoPlayer))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnEasy)
                            .addComponent(btnHard))
                        .addGap(34, 34, 34)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnStart, javax.swing.GroupLayout.DEFAULT_SIZE, 41, Short.MAX_VALUE)
                            .addComponent(btnLoad, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnSave, javax.swing.GroupLayout.DEFAULT_SIZE, 41, Short.MAX_VALUE)
                    .addComponent(btnReset, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 12, Short.MAX_VALUE)
                .addComponent(turnTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(69, 69, 69))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnOnePlayerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOnePlayerActionPerformed
        //the difficulty selector buttons are only enabled when they are needed, IE when the player wants to play one player
        btnEasy.setEnabled(true);
        btnHard.setEnabled(true);
    }//GEN-LAST:event_btnOnePlayerActionPerformed

    /**
     * The actions to be performed whenever the user clicks a space on the board
     * @param row the row of the button the user is pressing
     * @param column the column of the button the user is pressing
     */
    public void buttonPressed(int row, int column) {
        //if the space is not already filled
        if (theBoard[row][column].getText().equals("-")) {
            //the space is set to the corresponding player's symbol, X or O
            theBoard[row][column].setText(turn);
            //the button is disabled so it cannot be clicked again
            theBoard[row][column].setEnabled(false);
            //the turn is changed, X to O or O to X
            changeTurn();
            //updating the turn display 
            turnTxt.setText(turn + "'s turn.");
            //detecting if a win condition has been met
            winCheck();
            //calling the method to determine if it is needed, and if it is, deploy the AI opponent
            aiOpponent();
        }
    }
    private void btn12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn12ActionPerformed
        buttonPressed(1, 2);
    }//GEN-LAST:event_btn12ActionPerformed

    private void btnTwoPlayerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTwoPlayerActionPerformed
        //if the user selects 2 player mode the difficulty buttons are disabled, as they won't be needed
        btnEasy.setEnabled(false);
        btnHard.setEnabled(false);
    }//GEN-LAST:event_btnTwoPlayerActionPerformed

    private void btnStartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStartActionPerformed
        //Locking in all of the user's selections for mode and difficulty
        btnOnePlayer.setEnabled(false);
        btnTwoPlayer.setEnabled(false);
        btnEasy.setEnabled(false);
        btnHard.setEnabled(false);
        //enabling the game board
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                theBoard[i][j].setEnabled(true);
            }
        }
        //informing the user of who's turn it is;
        turnTxt.setText(turn + "'s turn.");
    }//GEN-LAST:event_btnStartActionPerformed

    private void btnResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResetActionPerformed
        //enabling the difficulty and mode selection buttons in case the user wants to change any of those settings
        btnOnePlayer.setEnabled(true);
        btnTwoPlayer.setEnabled(true);
        if (btnOnePlayer.isSelected()) {
            btnEasy.setEnabled(true);
            btnHard.setEnabled(true);
        }
        //disabling and clearing the board
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                theBoard[i][j].setEnabled(false);
                theBoard[i][j].setText("-");
            }
        }
        //removing the turn indicator/win message
        turnTxt.setText("");
        //resetting the turn back to the default beginning turn
        turn = "X";
    }//GEN-LAST:event_btnResetActionPerformed

    private void btn00ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn00ActionPerformed
        buttonPressed(0, 0);
    }//GEN-LAST:event_btn00ActionPerformed

    private void btn01ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn01ActionPerformed
        buttonPressed(0, 1);
    }//GEN-LAST:event_btn01ActionPerformed

    private void btn02ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn02ActionPerformed
        buttonPressed(0, 2);
    }//GEN-LAST:event_btn02ActionPerformed

    private void btn10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn10ActionPerformed
        buttonPressed(1, 0);
    }//GEN-LAST:event_btn10ActionPerformed

    private void btn11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn11ActionPerformed
        buttonPressed(1, 1);
    }//GEN-LAST:event_btn11ActionPerformed

    private void btn20ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn20ActionPerformed
        buttonPressed(2, 0);
    }//GEN-LAST:event_btn20ActionPerformed

    private void btn21ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn21ActionPerformed
        buttonPressed(2, 1);
    }//GEN-LAST:event_btn21ActionPerformed

    private void btn22ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn22ActionPerformed
        buttonPressed(2, 2);
    }//GEN-LAST:event_btn22ActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        int mode, difficulty;
        String spaces[][] = new String[3][3]; //a parallel array to the board to store what is in each square
        boolean activations[][] = new boolean[3][3]; //a parallel array to the board to store the state of each square
        //loading the 2 arrays with the text and enabled state of each square into the parallel arrays
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                spaces[i][j] = theBoard[i][j].getText();
                activations[i][j] = theBoard[i][j].isEnabled();
            }
        }
        try {
            FileWriter savedGame = new FileWriter("src/rabetictactoe/savedata.txt");
            //if the 2 player button is selected that is written to the file
            if (btnTwoPlayer.isSelected()) {
                savedGame.write("Two Player\n");
                //otherwise the one player button is selected and that is written to the file
            } else {
                savedGame.write("One Player\n");
                //if the easy button is selected that is written to the file
                if (btnEasy.isSelected()) {
                    savedGame.write("Easy\n");
                    //otherwise the hard button is selected and that is written to the file
                } else {
                    savedGame.write("Hard\n");
                }
            }
            //writing the text and states from the parallel arrays to the file
            for (int i = 0; i < 3; i++) {
                for (int j = 0; j < 3; j++) {
                    savedGame.write(spaces[i][j] + "\n");
                    savedGame.write(activations[i][j] + "\n");
                }
            }
            savedGame.close();
        } catch (IOException e) {
            System.out.println("Error: " + e);
        }
    }//GEN-LAST:event_btnSaveActionPerformed

    private void btnLoadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLoadActionPerformed
        try {
            File f = new File("src/rabetictactoe/savedata.txt");
            Scanner s = new Scanner(f);
            while (s.hasNextLine()) {
                //setting the button state of the mode buttons according to what is in the file
                if (s.nextLine().equals("One Player")) {
                    btnOnePlayer.setSelected(true);
                    //setting the difficulty buttons according to what is written in the file
                    if (s.nextLine().equals("Easy")) {
                        btnEasy.setSelected(true);
                    } else {
                        btnHard.setSelected(true);
                    }
                } else {
                    btnTwoPlayer.setSelected(true);
                }
                //disabling all of the menu buttons
                btnOnePlayer.setEnabled(false);
                btnTwoPlayer.setEnabled(false);
                btnEasy.setEnabled(false);
                btnHard.setEnabled(false);
                //setting the board to the stored values and enabled statuses
                for (int i = 0; i < 3; i++) {
                    for (int j = 0; j < 3; j++) {
                        theBoard[i][j].setText(s.nextLine());
                        theBoard[i][j].setEnabled(Boolean.parseBoolean(s.nextLine()));
                    }
                }
            }
        } catch (FileNotFoundException e) {
            System.out.println("Error: " + e);
        }
    }//GEN-LAST:event_btnLoadActionPerformed
    /**
     * changes the turn to the opposite of what is already is
     */
    public void changeTurn() {
        if (turn.equals("X")) {
            turn = "O";
        } else {
            turn = "X";
        }
    }

    public String buildLine(int num) {
        String line = null;
        switch (num) {
                case 0:
                    line = theBoard[0][0].getText() + theBoard[0][1].getText() + theBoard[0][2].getText();
                    break;
                case 1:
                    line = theBoard[1][0].getText() + theBoard[1][1].getText() + theBoard[1][2].getText();
                    break;
                case 2:
                    line = theBoard[2][0].getText() + theBoard[2][1].getText() + theBoard[2][2].getText();
                    break;
                case 3:
                    line = theBoard[0][0].getText() + theBoard[1][0].getText() + theBoard[2][0].getText();
                    break;
                case 4:
                    line = theBoard[0][1].getText() + theBoard[1][1].getText() + theBoard[2][1].getText();
                    break;
                case 5:
                    line = theBoard[0][2].getText() + theBoard[1][2].getText() + theBoard[2][2].getText();
                    break;
                case 6:
                    line = theBoard[0][0].getText() + theBoard[1][1].getText() + theBoard[2][2].getText();
                    break;
                case 7:
                    line = theBoard[0][2].getText() + theBoard[1][1].getText() + theBoard[2][0].getText();
                    break;
        }
        return line;
    }
    
    public int xDetector(int i, String line) {
        switch (i) {
            case 0:
                theBoard[0][line.indexOf("-")].setText("O");
                theBoard[0][line.indexOf("-")].setEnabled(false);
                i = 8;
                changeTurn();
                break;
            case 1:
                theBoard[1][line.indexOf("-")].setText("O");
                theBoard[1][line.indexOf("-")].setEnabled(false);
                i = 8;
                changeTurn();
                break;
            case 2:
                theBoard[2][line.indexOf("-")].setText("O");
                theBoard[2][line.indexOf("-")].setEnabled(false);
                i = 8;
                changeTurn();
                break;
            case 3:
                theBoard[line.indexOf("-")][0].setText("O");
                theBoard[line.indexOf("-")][0].setEnabled(false);
                i = 8;
                changeTurn();
                break;
            case 4:
                theBoard[line.indexOf("-")][1].setText("O");
                theBoard[line.indexOf("-")][1].setEnabled(false);
                i = 8;
                changeTurn();
                break;
            case 5:
                theBoard[line.indexOf("-")][2].setText("O");
                theBoard[line.indexOf("-")][2].setEnabled(false);
                i = 8;
                changeTurn();
                break;
            case 6:
                theBoard[line.indexOf("-")][line.indexOf("-")].setText("O");
                theBoard[line.indexOf("-")][line.indexOf("-")].setEnabled(false);
                i = 8;
                changeTurn();
                break;
            case 7:
                theBoard[line.indexOf("-")][2 - (line.indexOf("-"))].setText("O");
                theBoard[line.indexOf("-")][2 - (line.indexOf("-"))].setEnabled(false);
                i = 8;
                changeTurn();
                break;
        }

        return i;
    }
    
    /**
     * This Method Checks to see if a win has occured and if it was X's or O's
     * (Inspired by the method used in
     * https://www.geeksforgeeks.org/tic-tac-toe-game-in-java/)
     */
    public void winCheck() {
        boolean winner = false;
        int dashCounter;
        dashCounter = 0;
        for (int i = 0; i < 8; i++) {
            String line = null;
            line = buildLine(i);
            
            
            //For X winner
            if (line.equals("XXX")) {
                turnTxt.setText("X Wins!");
                winner = true;
                for (int j = 0; j < 3; j++) {
                    for (int k = 0; k < 3; k++) {
                        theBoard[j][k].setEnabled(false);
                    }
                }
            } // For O winner
            else if (line.equals("OOO")) {
                turnTxt.setText("O Wins!");
                winner = true;
                for (int j = 0; j < 3; j++) {
                    for (int k = 0; k < 3; k++) {
                        theBoard[j][k].setEnabled(false);
                    }
                }
            }
        }

        for (int l = 0; l < 3; l++) {
            for (int m = 0; m < 3; m++) {
                if (theBoard[l][m].getText().equals("-")) {
                    dashCounter++;
                }
            }
        }
        if (!turnTxt.equals("O Wins!") && !turnTxt.equals("X Wins!") && winner == false) {
            if (dashCounter == 0) {
                turnTxt.setText("Tie! Game Over!");
            }
        }
    }
    
    /**
     * gives the user an opponent based on their menu selections
     */
    public void aiOpponent() {
        int rNumRow, rNumColumn;
        rNumRow = 0;
        rNumColumn = 0;

        int first, last;
        int count = 0;
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                if (theBoard[i][j].getText().equals("-")) {
                    count++;
                }
            }
        }
        if (count > 1) {
            if (btnOnePlayer.isSelected()) {
                if (btnEasy.isSelected()) {
                    while (turn.equals("O")) {
                        rNumRow = ((int) (Math.random() * 3) + 1) - 1;

                        rNumColumn = ((int) (Math.random() * 3) + 1) - 1;
                        if (theBoard[rNumRow][rNumColumn].getText().equals("-")) {
                            theBoard[rNumRow][rNumColumn].setText(turn);
                            theBoard[rNumRow][rNumColumn].setEnabled(false);
                            turnTxt.setText("X's turn.");
                            winCheck();
                            changeTurn();

                        }
                    }
                } else if (btnHard.isSelected()) {
                    /*for (int i = 0; i < 3; i++) {
                        for (int j = 0; j < 3; j++) {
                            line += theBoard[i][j];
                        }
                    }
                    for (int i = 0; i < 3; i++) {
                        for (int j = 0; j < 3; j++) {
                            line += theBoard[j][i];
                        }
                    }
                    for (int i = 0; i < 3; i++) {
                        line += theBoard[i][i];
                    }
                    for (int i = 2; i > -1; i--) {
                        line += theBoard[i][i];
                    }*/
                    for (int i = 0; i < 8; i++) {
                        String line = null;

                        line = buildLine(i);
                        
                        if (line.indexOf("X") != line.lastIndexOf("X")) {
                            if (line.indexOf("-") == line.lastIndexOf("-") && line.indexOf("-") != -1) {
                                
                                i = xDetector(i, line);
                                
                            }
                        } // For O winner
                        else if (line.indexOf("O") != line.lastIndexOf("O")) {
                            if (line.indexOf("-") == line.lastIndexOf("-") && line.indexOf("-") != -1) {
                                
                                i = xDetector(i, line);
                                
                            }
                        }
                    }
                    turnTxt.setText("X's turn.");
                    winCheck();
                    if (turn.equals("O")) {
                        while (turn.equals("O")) {
                            rNumRow = ((int) (Math.random() * 3) + 1) - 1;

                            rNumColumn = ((int) (Math.random() * 3) + 1) - 1;
                            if (theBoard[rNumRow][rNumColumn].getText().equals("-")) {
                                theBoard[rNumRow][rNumColumn].setText(turn);
                                theBoard[rNumRow][rNumColumn].setEnabled(false);
                                turnTxt.setText("X's turn.");
                                winCheck();
                                changeTurn();

                            }
                        }
                    }

                }
            }
        }
    }

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(RabeTicTacToe.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(RabeTicTacToe.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(RabeTicTacToe.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RabeTicTacToe.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new RabeTicTacToe().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn00;
    private javax.swing.JButton btn01;
    private javax.swing.JButton btn02;
    private javax.swing.JButton btn10;
    private javax.swing.JButton btn11;
    private javax.swing.JButton btn12;
    private javax.swing.JButton btn20;
    private javax.swing.JButton btn21;
    private javax.swing.JButton btn22;
    private javax.swing.JRadioButton btnEasy;
    private javax.swing.JRadioButton btnHard;
    private javax.swing.JButton btnLoad;
    private javax.swing.JRadioButton btnOnePlayer;
    private javax.swing.JButton btnReset;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton btnStart;
    private javax.swing.JRadioButton btnTwoPlayer;
    private javax.swing.ButtonGroup difficultyButtons;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.ButtonGroup modeButtons;
    private javax.swing.JLabel turnTxt;
    // End of variables declaration//GEN-END:variables
}
