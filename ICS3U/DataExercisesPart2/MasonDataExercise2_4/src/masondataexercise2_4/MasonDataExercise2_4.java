/*
Roan Mason
04/11/22

Design a GUI that allows the user to select their zodiacal sign. Your program will search 
this data file for the sign indicated and display that signâ€™s: date range, horoscope, colours, 
gemstone, metal, tree, flowers, and planet.

Modify your Zodiac program so that the user can select their birth month and birth date, and the 
program will display the date for the appropriate zodiac sign.
*/
package masondataexercise2_4;

import java.io.File;
import java.io.FileNotFoundException;
import java.util.Scanner;
import java.util.NoSuchElementException;
import java.awt.Color;

public class MasonDataExercise2_4 extends javax.swing.JFrame {

    /**
     * Creates new form MasonDataExercise2_4
     */
    public MasonDataExercise2_4() {
        initComponents();
        this.getContentPane().setBackground(Color.magenta);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblSignPrompt = new javax.swing.JLabel();
        btnDisplay = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtOutput = new javax.swing.JTextArea();
        cbMonth = new javax.swing.JComboBox<>();
        cbDay = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        lblSignPrompt.setText("Enter your birthday:");

        btnDisplay.setText("Display");
        btnDisplay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDisplayActionPerformed(evt);
            }
        });

        txtOutput.setEditable(false);
        txtOutput.setColumns(20);
        txtOutput.setLineWrap(true);
        txtOutput.setRows(5);
        txtOutput.setToolTipText("");
        txtOutput.setWrapStyleWord(true);
        jScrollPane1.setViewportView(txtOutput);

        cbMonth.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December" }));

        cbDay.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31" }));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblSignPrompt)
                        .addGap(18, 18, 18)
                        .addComponent(cbMonth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(cbDay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnDisplay)))
                .addContainerGap(191, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblSignPrompt)
                    .addComponent(btnDisplay)
                    .addComponent(cbMonth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbDay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(15, 15, 15))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnDisplayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDisplayActionPerformed
        // TODO add your handling code here:
        
        String output = "", month, chosenSign = "", storedSign = "";
        int day;
                
        try {
            File f = new File("src/masondataexercise2_4/ZODIAC.txt");
            Scanner s = new Scanner(f);
            month = cbMonth.getSelectedItem().toString();
            day = Integer.parseInt(cbDay.getSelectedItem().toString());

            if (month.equals("February") && day > 29) {
                output = "That's not a real date!";
            } else if (month.equals("April") && day > 30) {
                output = "That's not a real date!";
            } else if (month.equals("June") && day > 30) {
                output = "That's not a real date!";
            } else if (month.equals("September") && day > 30) {
                output = "That's not a real date!";
            } else if (month.equals("November") && day > 30) {
                output = "That's not a real date!";
            } else {
                if ((month.equals("January") && day >= 21) || (month.equals("February") && day <= 19)) {
                    chosenSign = "AQUARIUS";
                } else if ((month.equals("March") && day >= 21) || (month.equals("April") && day <= 20)) {
                    chosenSign = "ARIES";
                } else if ((month.equals("June") && day >= 22) || (month.equals("July") && day <= 22)) {
                    chosenSign = "CANCER";
                } else if ((month.equals("December") && day >= 22) || (month.equals("January") && day <= 20)) {
                    chosenSign = "CAPRICORN";
                } else if ((month.equals("May") && day >= 22) || (month.equals("June") && day <= 21)) {
                    chosenSign = "GEMINI";
                } else if ((month.equals("July") && day >= 23) || (month.equals("August") && day <= 23)) {
                    chosenSign = "LEO";
                } else if ((month.equals("September") && day >= 24) || (month.equals("October") && day <= 23)) {
                    chosenSign = "LIBRA";
                } else if ((month.equals("February") && day >= 20) || (month.equals("March") && day <= 20)) {
                    chosenSign = "PISCES";
                } else if ((month.equals("November") && day >= 23) || (month.equals("December") && day <= 21)) {
                    chosenSign = "SAGITTARIUS";
                } else if ((month.equals("October") && day >= 24) || (month.equals("November") && day <= 22)) {
                    chosenSign = "SCORPIO";
                } else if ((month.equals("April") && day >= 21) || (month.equals("May") && day <= 21)) {
                    chosenSign = "TAURUS";
                } else if ((month.equals("August") && day >= 24) || (month.equals("September") && day <= 23)) {
                    chosenSign = "VIRGO";
                }
            }

            while (!chosenSign.equalsIgnoreCase(storedSign)) {
                storedSign = s.nextLine();
                output = storedSign
                        + "\n" + s.nextLine() //date
                        + "\n" + s.nextLine() //description
                        + "\nColour(s): " + s.nextLine()
                        + "\nGemstone(s): " + s.nextLine()
                        + "\nMetal(s)" + s.nextLine()
                        + "\nTree(s): " + s.nextLine()
                        + "\nFlower(s): " + s.nextLine()
                        + "\nPlanet: " + s.nextLine();
            }
            txtOutput.setText(output);

        } catch (FileNotFoundException e) {

        } catch (NoSuchElementException s) {

        }
        
    }//GEN-LAST:event_btnDisplayActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MasonDataExercise2_4.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MasonDataExercise2_4.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MasonDataExercise2_4.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MasonDataExercise2_4.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MasonDataExercise2_4().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDisplay;
    private javax.swing.JComboBox<String> cbDay;
    private javax.swing.JComboBox<String> cbMonth;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblSignPrompt;
    private javax.swing.JTextArea txtOutput;
    // End of variables declaration//GEN-END:variables
}
